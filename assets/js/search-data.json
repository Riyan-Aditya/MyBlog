{
  
    
        "post0": {
            "title": "[DRAFT - DO NOT SHARE] nbdev + GitHub Codespaces: A New Literate Programming Environment",
            "content": "Today, we are going to show you how to set up a literate programming environment, allowing you to use an IDE (VS Code) and an interactive computing environment (Jupyter), without leaving your browser, for free, in under 5 minutes. You’ll even see how VSCode and Jupyter work together automatically! But first, what is literate programming? And how did I got from a skeptic to a big fan of literate programming in a month? . Introduction . Literate programming is a programming paradigm introduced by Donald Knuth in which a computer program is given an explanation of its logic in a natural language, such as English, interspersed with snippets of macros and traditional source code, from which compilable source code can be generated. According to Knuth, literate programming provides higher-quality programs by forcing programmers to explicitly state the thoughts behind the program. This process makes poorly thought-out design decisions more obvious. Knuth also claims that literate programming provides a first-rate documentation system, which is not an add-on, but is grown naturally in the process of exposition of one’s thoughts during a program’s creation. 1 . When I first learned about literate programming, I was quite skeptical. For the longest time, I had wrongly equated Jupyter notebooks with literate programming. Indeed, Jupyter is a brilliant interactive computing system, which was awarded the Association of Computing Machinery (ACM) Software System Award, and is loved by many developers. However, Jupyter falls short of the literate programming paradigm for the following reasons:2 . It can be difficult to compile source code from notebooks. | It can be difficult to diff and use version control with notebooks because they are not stored in plain text. | It is not clear how to automatically generate documentation from notebooks. | It is not clear how to properly run tests suites when writing code in notebooks. | . My skepticism quickly evaporated when I began using nbdev, a project that extends notebooks to complete the literate programming ideal. I spent a month, full time, using nbdev while contributing to the python library fastcore, and can report that Donald Knuth was definitely onto something. The process of writing prose and tests alongside code forced me to deeply understand why the code does what it does, and to think deeply about its design. Furthermore, the reduced cognitive load and speed of iteration of having documentation, code, and tests in one location boosted my productivity to levels I have never before experienced as a software developer. Furthermore, I found that developing this way bolstered collaboration such that code reviews not only happened faster but were more meaningful. In short, nbdev may be the most profound productivity tool I have ever used. . As a teaser, look how easy it is to instantiate this literate programming environment, which includes a notebook, a docs site and an IDE with all dependencies pre-installed! :point_down: . . Features of nbdev . As discussed in the docs, nbdev provides the following features: . Searchable, hyperlinked documentation, which can be automatically hosted on GitHub Pages for free. | Python modules, following best practices such as automatically defining __all__ with your exported functions, classes, and variables. | Pip and Conda installers. | Tests defined directly in notebooks which run in parallel. This testing system has been thoroughly tested with GitHub Actions. | Navigate and edit your code in a standard text editor or IDE, and export any changes automatically back into your notebooks. | . Since you are in a notebook, you can also add charts, text, links, images, videos, etc, that are included automatically in the documentation of your library, along with standardized documentation generated automatically from your code. This site is an example of docs generated automatically by nbdev. . GitHub Codespaces . Thanks to Conda and nbdev_template, setting up a development environment with nbdev is far easier than it used to be. However, we realized it could be even easier, thanks to a new GitHub product called Codespaces. Codespaces is a fully functional development environment in your browser, accessible directly from GitHub, that provides the following features: . A full VS Code IDE. | An environment that has files from the repository mounted into the environment, along with your GitHub credentials. | A development environment with dependencies pre-installed, backed by Docker. | The ability to serve additional applications on arbitrary ports. For nbdev, we serve a Jupyter notebook server as well as a Jekyll based documentation site. | A shared file system, which facilitates editing code in one browser tab and rendering the results in another. | … and more. | Codespaces enables developers to immediately participate in a project without wasting time on DevOps or complicated setup steps. Most importantly, CodeSpaces with nbdev allows developers to quickly get started with creating their own software with literate programming. . A demo of nbdev + Codespaces . This demo uses the project fastai/fastcore, which was built with nbdev, as an example. First, we can navigate to this repo and launch a Codespace: . . If you are launching a fresh Codespace, it may take several minutes to set up. Once the environment is ready, we can verify that all dependencies we want are installed (in this case fastcore and nbdev): . . Additionally, we can serve an arbitrary number of applications on user-specified ports, which we can open through VSCode as shown below: . . In this case, these applications are a notebook and docs site. Changes to a notebook are reflected immediately in the data docs. Furthermore, we can use the cli command nbdev_build_lib to sync our notebooks with python modules. This functionality is shown below: . . This is amazing! With a click of a button, I was able to: . Launch an IDE with all dependencies pre-installed. | Launch two additional applications: a Jupyter Notebook server on port 8080 and a docs site on port 4000. | Automatically update the docs and modules every time I make a change to a Jupyter notebook. | This is just the tip of the iceberg. There are additional utilities for writing and executing tests, diffing notebooks, special flags for hiding, showing, and collapsing cells in the generated docs, as well as git hooks for automation. This and more functionality is covered in the nbdev docs. . Give It A Try For Yourself . To try out nbdev yourself, take this tutorial, which will walk you through everything you need to know. The tutorial also shows you how to use a repository template with the configuration files necessary to enable Codespaces with nbdev. . You Can Write Blogs With Notebooks, Too! . This blog post was written in fastpages which is also built on nbdev! We recommend fastpages if you want an easy way to blog with Jupyter notebooks. . Additional Resources . The GitHub Codepaces site. | The official docs for Codespaces. | The nbdev docs. | The nbdev GitHub repo. | fastpages: The project used to write this blog. | The GitHub repo fastai/fastcore, which is what we used in this blog post as an example. | . Wikipedia article: Literate Programming &#8617; . | This is not a criticism of Jupyter. Jupyter doesn’t claim to be a full literate programming system. However, people can sometimes (unfairly) judge Jupyter according to this criteria. &#8617; . |",
            "url": "https://riyan-aditya.github.io//MyBlog/codespaces",
            "relUrl": "/codespaces",
            "date": " • Nov 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Auto create certificate and email",
            "content": "In my organisation, we host webinar from time to time. Participants are getting e-certificate for attending. Our admin usually created custom certificate for each person manually, then emailing them one by one. Well, this is inefficiency, especially considering we are going to host 6 events in November. . I believe various Customer Relationship Manager (CRM) software can do this easily, but I thought, why not help out the admins while sharpening my programming skill. . Original code was found in stack overflow: . https://stackoverflow.com/questions/59289531/sending-email-to-different-recipients-with-different-file-attachments-using-pyth | . Import python code . # import python library import smtplib, ssl from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart from email.mime.base import MIMEBase from email import encoders from string import Template import pandas as pd import os . . Read participant list . First, we need to read an excel file containing a list of all participants&#39; name to be written for each certificate certificate, as well as their email address for the certificates to be emailed to. . # read the file containing the database with the mail and the corresponding file path = &#39;C:/Users/Riyan Aditya/Desktop/ML_learning/Project5_ISED_email&#39; os.chdir(path) filename = &quot;lists_trial_for_blog.xlsx&quot; e = pd.read_excel(filename) . . e.head() . Nomer Nama participan Email participan . 0 | 1 | aaaa | aaaa@gmail.com | . 1 | 2 | bbbb | bbbb@gmail.com | . 2 | 3 | cccc dddd | cccc_dddd@gmail.com | . 3 | 4 | eeee | eeee@gmail.com | . Generate e-certificate for each participant . Then I will read the certificate template using Python&#39;s Pillow library . Note: I removed the bottom half to hide the signature in the certificate. This is the certificate that we gave in one of our previous webinar. . Links: . ISED: https://ised-id.org/ | Akutuku: https://akutuku.id/c/ | . # read certificate template and generate certificate for each participant from PIL import Image, ImageDraw, ImageFont # load and create image object path = &#39;C:/Users/Riyan Aditya/Desktop/ML_learning/Project5_ISED_email/sertifikat&#39; os.chdir(path) image_rgba = Image.open(&#39;E-CERTIFICATE template nosignature.png&#39;) # convert rgba image to rgb (PDF needs RGB) image_rgb = Image.new(&#39;RGB&#39;, image_rgba.size, (255, 255, 255)) # white background image_rgb.paste(image_rgba, mask=image_rgba.split()[3]) # paste using alpha channel as mask image_rgb . . # get dimension of certificate width, height = image_rgb.size width, height . . (1991, 887) . this code is to fill the certificate with each participants&#39; name . # this code is to fill the certificate with each participants&#39; name # Initialise drawing content with the image object as background # Go through xlsx file of participants and write the participants name in each certificate # save certificate on pdf # load font font = ImageFont.truetype(&quot;times-ro.ttf&quot;, 100) # change path to a new folder path = &#39;C:/Users/Riyan Aditya/Desktop/ML_learning/Project5_ISED_email/sertifikat/sertifikat_tiap_peserta&#39; os.chdir(path) # create empty column in DF to refer to the filename of each certificate #e[&#39;sertifikal_filename&#39;] = &quot;&quot; for index, row in e.iterrows(): # copy image_rgb as certificate template cert_template = image_rgb.copy() # define image, font, message draw = ImageDraw.Draw(cert_template) # use certificate width, but custom height W, H = width, 1150 msg = e.loc[index][&#39;Nama participan&#39;] # find out the width and height of the text based on the defined font w, h = draw.textsize(msg, font = font) # draw text draw.text(((W-w)/2,(H-h)/2), msg, fill=&quot;black&quot;, font = font) # image # save image cert_template.save(msg+&quot;.pdf&quot;, &quot;PDF&quot;) # update dataframe for filename of each participants e.at[index,&#39;sertifikat filename&#39;] = msg+&quot;.pdf&quot; . . Print one certificate to check output . # print one certificate to check cert_template . . Sending automatic email . In this example, we will use gmail. In gmail, you need to enable permission to send email from outside sources. . See here: https://support.google.com/accounts/answer/6010255 . First, login to your email. Input email and password . # In this example we will use gmail context = ssl.create_default_context() server = smtplib.SMTP_SSL(&#39;smtp.gmail.com&#39;, 465,context=context) server.login(&#39;xxxxxxxx@gmail.com&#39;,&#39;YourPassword&#39;) . . (235, b&#39;2.7.0 Accepted&#39;) . e.head() . Nomer Nama participan Email participan sertifikat filename . 0 | 1 | aaaa | aaaa@gmail.com | aaaa.pdf | . 1 | 2 | bbbb | bbbb@gmail.com | bbbb.pdf | . 2 | 3 | cccc dddd | cccc_dddd@gmail.com | cccc dddd.pdf | . 3 | 4 | eeee | eeee@gmail.com | eeee.pdf | . Create function to automatically attach certificate and send email . # Create function to auto send email # change path import os path = &#39;C:/Users/Riyan Aditya/Desktop/ML_learning/Project5_ISED_email/sertifikat/sertifikat_tiap_peserta&#39; os.chdir(path) # Email parameter subject = &quot;E-certificate webinar ISED&quot; fromaddr=&#39;xxxxxxxx@gmail.com&#39; def auto_email(df): # iterate over each row of participants data for index, row in df.iterrows(): # Email body body = (&quot;&quot;&quot; Selamat pagi Bapak/Ibu &quot;&quot;&quot;+str(row[&quot;Nama participan&quot;])+&quot;&quot;&quot;, Berikut terlampir e-sertifikat atas kehadiran Bapak/Ibu dalam acara webinar kita. Terima kasih. Salam, Riyan (on behalf of team ISED) &quot;&quot;&quot;) # Email body print (row[&quot;Email participan&quot;]+&quot; &quot;+row[&quot;sertifikat filename&quot;]) msg = MIMEMultipart() msg[&#39;From&#39;] = fromaddr msg[&#39;Subject&#39;] = subject msg.attach(MIMEText(body, &#39;plain&#39;)) filename = row[&quot;sertifikat filename&quot;] toaddr = row[&quot;Email participan&quot;] attachment = open(row[&quot;sertifikat filename&quot;], &quot;rb&quot;) part = MIMEBase(&#39;application&#39;, &#39;octet-stream&#39;) part.set_payload((attachment).read()) encoders.encode_base64(part) part.add_header(&#39;Content-Disposition&#39;, &quot;attachment; filename= %s&quot; % filename) msg.attach(part) text = msg.as_string() server.sendmail(fromaddr, toaddr, text) print(&#39;&#39;) print(&quot;Emails sent successfully&quot;) . . Then, send the emails . auto_email(e) # dont forget to quit the server server.quit() . aaaa@gmail.com aaaa.pdf bbbb@gmail.com bbbb.pdf cccc_dddd@gmail.com cccc dddd.pdf eeee@gmail.com eeee.pdf Emails sent successfully . (221, b&#39;2.0.0 closing connection j20sm22750989pfd.40 - gsmtp&#39;) .",
            "url": "https://riyan-aditya.github.io//MyBlog/2020/10/13/auto-cert-email.html",
            "relUrl": "/2020/10/13/auto-cert-email.html",
            "date": " • Oct 13, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Covid19 in Indonesia",
            "content": "This notebook is my practise to do EDA (exploratory data analysis) . I used to be interested on the daily covid data when covid hit Indonesia back in March and April. It had been a while, so let&#39;s have a look at them now . Data will be scrapped from: . https://github.com/CSSEGISandData/COVID-19 | Our World in Data (for Indonesia): https://github.com/owid/covid-19-data/tree/master/public/data | Covid data for Indonesia from SINTA (via KawalCOVID): http://sinta.ristekbrin.go.id/covid/datasets | GEOjson for Indonesia: https://bitbucket.org/rifani/geojson-political-indonesia/src/master/ | . Summary of this notebook: . Download Covid19 data for worldwide and Indonesia from several sources | Download GEOjson map for Indonesia | Worldwide: summary of latest data, worldwide map, death vs confirmed comparison | Indonesia: summary of latest data, summary plots (total cases, daily cases, positive rate and mortality rate) and other random stats that I am interested in | . New skills I picked up and applied on this notebook: . First time using Git properly | Using Plotly Express | Extracting data from Google Sheet API | Cleaning data. The spreadsheet is messy. Table are stacked on other tables in the same spreadsheet tab | Extracted data is string. Not sure if there is a way to extract in a numeric format instead of converting it to float manually. For next time, maybe there is a way to just download from Google Sheet automatically and just pd.read_csv() | Working with GEOjson data format and plotting an interactive map | . Import necessary python libraries . # download python libraries from datetime import datetime, timedelta import os import glob import wget from bs4 import BeautifulSoup import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns import geopandas as gpd import json import plotly.express as px import plotly.graph_objs as go # for offline ploting from plotly.offline import plot, iplot, init_notebook_mode init_notebook_mode(connected=True) from IPython.display import HTML . . Import data . # Download data from Github (daily) os.chdir(&quot;C:/Users/Riyan Aditya/Desktop/ML_learning/Project4_EDA_Covid_Indo/datasets&quot;) os.remove(&#39;time_series_covid19_confirmed_global.csv&#39;) os.remove(&#39;time_series_covid19_deaths_global.csv&#39;) os.remove(&#39;time_series_covid19_recovered_global.csv&#39;) # urls of the files urls = [&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#39;, &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&#39;, &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv&#39;] # download files for url in urls: filename = wget.download(url) . . 100% [............................................................................] 265849 / 265849 . Clean &amp; preprocess data . # convert csv to df confirmed_global = pd.read_csv(&#39;time_series_covid19_confirmed_global.csv&#39;) deaths_global = pd.read_csv(&#39;time_series_covid19_deaths_global.csv&#39;) recovered_global = pd.read_csv(&#39;time_series_covid19_recovered_global.csv&#39;) . . # Melt DF =&gt; switch rows of dates into column for simpler DF dates = confirmed_global.columns[4:] confirmed_globalv2 = confirmed_global.melt(id_vars = [&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;], value_vars = dates, var_name =&#39;Date&#39;, value_name = &#39;Confirmed&#39;) deaths_globalv2 = deaths_global.melt(id_vars = [&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;], value_vars = dates, var_name =&#39;Date&#39;, value_name = &#39;Deaths&#39;) recovered_globalv2 = recovered_global.melt(id_vars = [&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;], value_vars = dates, var_name =&#39;Date&#39;, value_name = &#39;Recovered&#39;) print(confirmed_globalv2.shape) print(deaths_globalv2.shape) print(recovered_globalv2.shape) . . (70755, 6) (70755, 6) (67310, 6) . Why are there differences in number of rows between confirmed (or death) &amp; recovered? . This seems to suggest some countries are missing their data . # Combine df covid_global = confirmed_globalv2.merge(deaths_globalv2, how=&#39;left&#39;, on = [&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;,&#39;Date&#39;]).merge( recovered_globalv2, how=&#39;left&#39;, on = [&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;,&#39;Date&#39;]) . . # preprocessing covid_global[&#39;Date&#39;] = pd.to_datetime(covid_global[&#39;Date&#39;]) #active cases covid_global[&#39;Active&#39;] = covid_global[&#39;Confirmed&#39;] - covid_global[&#39;Deaths&#39;] - covid_global[&#39;Recovered&#39;] . . Grouby data by day . # Data by day covid_global_daily = covid_global.groupby(&#39;Date&#39;)[&#39;Confirmed&#39;,&#39;Deaths&#39;,&#39;Recovered&#39;,&#39;Active&#39;].sum().reset_index() . . Grouby data by country . # Data by country temp = covid_global[covid_global[&#39;Date&#39;] ==max(covid_global[&#39;Date&#39;])].reset_index(drop=True).drop(&#39;Date&#39;, axis = 1) covid_global_percountry = temp.groupby(&#39;Country/Region&#39;)[&#39;Confirmed&#39;,&#39;Deaths&#39;,&#39;Recovered&#39;,&#39;Active&#39;].sum().reset_index() . . Worldwide Data Viz . Latest data . Show latest data . # latest data print(&#39;Date today&#39;,covid_global_daily[&#39;Date&#39;].iloc[-1]) print(&#39;Total cases&#39;,&#39;{:,}&#39;.format(covid_global_daily[&#39;Confirmed&#39;].iloc[-1])) print(&#39;Active cases&#39;,&#39;{:,}&#39;.format(covid_global_daily[&#39;Active&#39;].iloc[-1])) print(&#39;Recovered cases&#39;,&#39;{:,}&#39;.format(covid_global_daily[&#39;Recovered&#39;].iloc[-1])) print(&#39;Deaths cases&#39;,&#39;{:,}&#39;.format(covid_global_daily[&#39;Deaths&#39;].iloc[-1])) . . Date today 2020-10-12 00:00:00 Total cases 37,801,526 Active cases 9,207,268.0 Recovered cases 26,108,249.0 Deaths cases 995,057.0 . We almost reach 1M global death =( . # plot temp = covid_global_daily[[&#39;Date&#39;,&#39;Deaths&#39;,&#39;Recovered&#39;,&#39;Active&#39;]].tail(1) temp = temp.melt(id_vars=&#39;Date&#39;,value_vars = [&#39;Active&#39;,&#39;Deaths&#39;,&#39;Recovered&#39;]) fig = px.treemap(temp, path=[&#39;variable&#39;],values = &#39;value&#39;, height = 225) fig.data[0].textinfo = &#39;label+text+value&#39; . . HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;)) . . . . Total confirmed cases world map . World map interactive plot . def plot_map(df, col, pal): df = df[df[col]&gt;0] fig2 = px.choropleth(df, locations=&quot;Country/Region&quot;, locationmode=&#39;country names&#39;, color=col, hover_name=&quot;Country/Region&quot;, title=col, hover_data=[col], color_continuous_scale=pal) fig2.update_layout(coloraxis_showscale=False) return fig2 . . fig2 = plot_map(covid_global_percountry, &#39;Confirmed&#39;, &#39;matter&#39;) HTML(fig2.to_html(include_plotlyjs=&#39;cdn&#39;)) . . . . Treemap total confirmed cases . def plot_treemap(df,col): fig3 = px.treemap(df, path=[&quot;Country/Region&quot;], values=col, height=700, title=col, color_discrete_sequence = px.colors.qualitative.Dark2) fig3.data[0].textinfo = &#39;label+text+value&#39; return fig3 . . fig3 = plot_treemap(covid_global_percountry,&#39;Confirmed&#39;) HTML(fig3.to_html(include_plotlyjs=&#39;cdn&#39;)) . . . . Death vs confirmed . For top 50 countries with the highest total cases . def human_format(num): magnitude = 0 while abs(num) &gt;= 1000: magnitude += 1 num /= 1000.0 # add more suffixes if you need them return &#39;%.2f%s&#39; % (num, [&#39;&#39;, &#39;K&#39;, &#39;M&#39;, &#39;G&#39;, &#39;T&#39;, &#39;P&#39;][magnitude]) . . # plot fig4 = px.scatter(covid_global_percountry.sort_values(&#39;Deaths&#39;, ascending=False).iloc[:50, :], x=&#39;Confirmed&#39;, y=&#39;Deaths&#39;, color=&#39;Country/Region&#39;, size=&#39;Confirmed&#39;, height=700, text=&#39;Country/Region&#39;, log_x=True, log_y=True, title=&#39;Deaths vs Confirmed (Scale is in log10)&#39;, hover_data={&#39;Country/Region&#39;:True,&#39;Confirmed&#39;:&#39;:,&#39;,&#39;Deaths&#39;:&#39;:,&#39;}) fig4.update_traces(textposition=&#39;top center&#39;) fig4.update_layout(showlegend=False) HTML(fig4.to_html(include_plotlyjs=&#39;cdn&#39;)) . . . . Worldwide tests per thousand . Load data from Our World in Data . # load data url = &#39;https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv&#39; df2 = pd.read_csv(url) . . Parse to latest data . # parse to latest data df2_latest = df2.loc[df2.date == date_to_parse].reset_index() df2_latest = df2_latest[:-2] . . Eliminate countries that don&#39;t report new tests per thousand, sort by new tests per thousand value. . Note: not all countries report their new tests data regularly . Number of countries that report their data: . # eliminate countries that dont report new tests per thousand, sort by new tests per thousand value df3 = df2_latest[~df2_latest[&#39;new_tests_per_thousand&#39;].isnull()] df3 = df3.loc[:, [&#39;location&#39;,&#39;new_tests_per_thousand&#39;]] df3 = df3.sort_values(by=[&#39;new_tests_per_thousand&#39;], ascending = False) df3.shape . . (62, 2) . Top 10 countries best on tests per thousand: . df3 = df3.reset_index() df3.head(10) . . index location new_tests_per_thousand . 0 | 6 | United Arab Emirates | 13.542 | . 1 | 20 | Bahrain | 5.167 | . 2 | 53 | Denmark | 4.595 | . 3 | 69 | United Kingdom | 3.774 | . 4 | 161 | Russia | 2.809 | . 5 | 14 | Belgium | 2.571 | . 6 | 123 | Maldives | 2.372 | . 7 | 159 | Qatar | 2.232 | . 8 | 118 | Latvia | 1.773 | . 9 | 175 | Slovakia | 1.641 | . And Indonesia: . df3[df3[&#39;location&#39;]==&#39;Indonesia&#39;] . . index location new_tests_per_thousand . 48 | 88 | Indonesia | 0.081 | . we only tests 8% of our total population. Certainly much lower compared to other countries . Indonesia . Data starts 18 Mar . Import data . # find how many days in between 18 Mar to today (so we know how many rows to download) from datetime import date d0_total = date(2020, 3, 18) d0_harian = date(2020,3,15) d0_aktif = date(2020,3,21) d0_sembuh = date(2020,3,21) d0_deaths = date(2020,3,18) d1 = date.today() delta_total = d1 - d0_total delta_harian = d1 - d0_harian delta_aktif = d1 - d0_aktif delta_sembuh = d1 - d0_sembuh delta_deaths = d1 - d0_deaths . . All df imported are strings. need to convert to int. Also had to remove all the comma in the thousand separator. . Note: you need &quot;Credentials.json&quot;. You can get one by following this example: https://developers.google.com/sheets/api/quickstart/python . Code to import data from KawalCOVID: . # %load GoogleSheet from KawalCovid19 from __future__ import print_function import pickle import os.path from googleapiclient.discovery import build from google_auth_oauthlib.flow import InstalledAppFlow from google.auth.transport.requests import Request # If modifying these scopes, delete the file token.pickle. SCOPES = [&#39;https://www.googleapis.com/auth/spreadsheets.readonly&#39;] # The ID and range of a sample spreadsheet. SAMPLE_SPREADSHEET_ID = &#39;1ma1T9hWbec1pXlwZ89WakRk-OfVUQZsOCFl4FwZxzVw&#39; def main(): &quot;&quot;&quot;Shows basic usage of the Sheets API. Prints values from a sample spreadsheet. &quot;&quot;&quot; creds = None # The file token.pickle stores the user&#39;s access and refresh tokens, and is # created automatically when the authorization flow completes for the first # time. if os.path.exists(&#39;token.pickle&#39;): with open(&#39;token.pickle&#39;, &#39;rb&#39;) as token: creds = pickle.load(token) # If there are no (valid) credentials available, let the user log in. if not creds or not creds.valid: if creds and creds.expired and creds.refresh_token: creds.refresh(Request()) else: flow = InstalledAppFlow.from_client_secrets_file( &#39;credentials.json&#39;, SCOPES) creds = flow.run_local_server(port=0) # Save the credentials for the next run with open(&#39;token.pickle&#39;, &#39;wb&#39;) as token: pickle.dump(creds, token) service = build(&#39;sheets&#39;, &#39;v4&#39;, credentials=creds) # Call the Sheets API for total kasus - sheet = service.spreadsheets() SAMPLE_RANGE_NAME = &#39;Timeline!A1:AZ&#39; print(SAMPLE_RANGE_NAME) result = sheet.values().get(spreadsheetId=SAMPLE_SPREADSHEET_ID, range=SAMPLE_RANGE_NAME).execute() values = result.get(&#39;values&#39;, []) df1 = pd.DataFrame(values) # Call the Sheets API for Statistik harian - sheet = service.spreadsheets() SAMPLE_RANGE_NAME = &#39;Statistik Harian!A1:AL&#39; print(SAMPLE_RANGE_NAME) result = sheet.values().get(spreadsheetId=SAMPLE_SPREADSHEET_ID, range=SAMPLE_RANGE_NAME).execute() values = result.get(&#39;values&#39;, []) df = pd.DataFrame(values) headers = df.iloc[0] covid_id = pd.DataFrame(df.values[1:], columns=headers) covid_id.columns.values[0] = &quot;Dates&quot; covid_id = covid_id.replace(&#39;,&#39;,&#39;&#39;, regex=True).replace(&#39;-&#39;,&#39; &#39;, regex=True) covid_id = covid_id.replace(&#39;&#39;,0, regex=True) covid_id = covid_id.replace(&#39;#DIV/0!&#39;,0, regex=True) covid_id = covid_id.replace(&#39;#REF!&#39;,0, regex=True) covid_id = covid_id.set_index(&#39;Dates&#39;) covid_id = covid_id.replace(&#39;%&#39;,&#39;&#39;,regex=True).astype(&#39;float&#39;)/100 covid_id = covid_id.astype(&#39;float&#39;)*100 covid_id.index = pd.to_datetime(covid_id.index, format=&#39;%d %b&#39;) covid_id.index = covid_id.index + pd.DateOffset(year=2020) # Call the Sheets API for Population - sheet = service.spreadsheets() SAMPLE_RANGE_NAME = &#39;Copy of Data PCR - Kemenkes!J2:M36&#39; print(SAMPLE_RANGE_NAME) result = sheet.values().get(spreadsheetId=SAMPLE_SPREADSHEET_ID, range=SAMPLE_RANGE_NAME).execute() values = result.get(&#39;values&#39;, []) df2 = pd.DataFrame(values) # return DF -- return df1, covid_id, df2 indo_covid, covid_id, pop_id = main() . . Timeline!A1:AZ Statistik Harian!A1:AL . C: Users Riyan Aditya Anaconda3 lib site-packages pandas core arrays datetimes.py:837: PerformanceWarning: Non-vectorized DateOffset being applied to Series or DatetimeIndex . Copy of Data PCR - Kemenkes!J2:M36 . Clean data . indo_covid2 = indo_covid.copy() indo_covid2 = indo_covid2.iloc[:, :-1] . . # find index of relevant tables index_tk = indo_covid2.loc[indo_covid2[indo_covid2.columns[0]] == &#39;Total Kasus&#39;].index[0] index_ka = indo_covid2.loc[indo_covid2[indo_covid2.columns[0]] == &#39;Kasus Aktif&#39;].index[0] index_ks = indo_covid2.loc[indo_covid2[indo_covid2.columns[0]] == &#39;Sembuh&#39;].index[0] index_km = indo_covid2.loc[indo_covid2[indo_covid2.columns[0]] == &#39;Meninggal Dunia&#39;].index[0] #index_tk, index_ka, index_ks, index_km . . #Split table into total cases, active cases, recovered cases and deaths #Then set dates as the index total_cases = indo_covid2[index_tk:index_tk+delta_total.days+1:].rename( columns=indo_covid2.iloc[0]).drop(indo_covid2.index[0]).replace(&#39;-&#39;,&#39; &#39;, regex=True).set_index(&#39;Total Kasus&#39;) active_cases = indo_covid2[index_ka:index_ka+delta_aktif.days+1:].rename( columns=indo_covid2.iloc[index_ka]).drop(indo_covid2.index[index_ka]).replace(&#39;-&#39;,&#39; &#39;, regex=True).set_index(&#39;Kasus Aktif&#39;) recovered_cases = indo_covid2[index_ks:index_ks+delta_sembuh.days+1:].rename( columns=indo_covid2.iloc[index_ks]).drop(indo_covid2.index[index_ks]).replace(&#39;-&#39;,&#39; &#39;, regex=True).set_index(&#39;Sembuh&#39;) deaths_cases = indo_covid2[index_km:index_km+delta_deaths.days+1:].rename( columns=indo_covid2.iloc[index_km]).drop(indo_covid2.index[index_km]).replace(&#39;-&#39;,&#39; &#39;, regex=True).set_index(&#39;Meninggal Dunia&#39;) . . # clean df def clean_df(df): mask = df.applymap(lambda x: x is None) cols = df.columns[(mask).any()] for col in df[cols]: df.loc[mask[col], col] = 0 df = df.replace(&#39;,&#39;,&#39;&#39;, regex=True).replace(&#39;&#39;,0, regex=True) df = df.astype(&#39;float64&#39;) df.index = pd.to_datetime(df.index, format=&#39;%d %b&#39;) df.index = df.index + pd.DateOffset(year=2020) return df total_cases = clean_df(total_cases) active_cases = clean_df(active_cases) recovered_cases = clean_df(recovered_cases) deaths_cases = clean_df(deaths_cases) . . # generate new cases, new recovered, new deaths new_cases = total_cases.diff() new_recovered = recovered_cases.diff() new_deaths = deaths_cases.diff() . . Latest Indonesian data . # display latest data print(d1) new_cases_temp = covid_id[&#39;Total kasus&#39;][-1] - covid_id[&#39;Total kasus&#39;][-2] print(&#39;Total cases&#39;,&#39;{:,}&#39;.format(covid_id[&#39;Total kasus&#39;][-1])) print(&#39;New cases&#39;,&#39;{:,}&#39;.format(new_cases_temp)) print(&#39;Active cases&#39;,&#39;{:,}&#39;.format(covid_id[&#39;Kasus aktif&#39;][-1])) print(&#39;Total recovered&#39;,&#39;{:,}&#39;.format(covid_id[&#39;Sembuh&#39;][-1])) print(&#39;Total deaths&#39;,&#39;{:,}&#39;.format(covid_id[&#39;Meninggal nDunia&#39;][-1])) . . 2020-10-14 Total cases 340,622.0 New cases 3,906.0 Active cases 65,299.0 Total recovered 263,296.0 Total deaths 12,027.0 . Total cases plot . Latest Indonesian Covid data: . # codes import matplotlib.ticker as mtick from matplotlib.dates import DateFormatter from pandas.plotting import * register_matplotlib_converters() fig, ax = plt.subplots(1, 1, figsize=(15,5)) ax.plot(covid_id.index,covid_id[&#39;Total kasus&#39;],&#39;-D&#39;,markersize = 3) plt.yticks(np.arange(0,400001,100000), fontsize=16) plt.xticks( fontsize=16) plt.ylabel(&#39;Total cases&#39;, fontsize=18) ax.get_yaxis().set_major_formatter(mtick.FuncFormatter(lambda x, p: format(int(x), &#39;,&#39;))) myFmt = DateFormatter(&quot;%b&quot;) ax.xaxis.set_major_formatter(myFmt) plt.show() . . Daily cases . # codes fig, ax = plt.subplots(1, 1, figsize=(15,5)) ln1 = ax.plot(covid_id.index,covid_id[&#39;Kasus baru&#39;],&#39;-D&#39;,markersize = 3,label = &#39;Daily cases&#39;) ax2 = ax.twinx() ln2 = ax2.bar(covid_id.index,covid_id[&#39;Spesimen&#39;],alpha = 0.2, color = &#39;black&#39;,label = &#39;Daily tests&#39;) ax.tick_params(axis=&#39;both&#39;, which=&#39;major&#39;, labelsize=16) ax2.tick_params(axis=&#39;both&#39;, which=&#39;major&#39;, labelsize=16) ax2.set_ylim([0,60000]) ax.get_yaxis().set_major_formatter(mtick.FuncFormatter(lambda x, p: format(int(x), &#39;,&#39;))) ax2.get_yaxis().set_major_formatter(mtick.FuncFormatter(lambda x, p: format(int(x), &#39;,&#39;))) ax.set_ylabel(&#39;Daily cases&#39;,fontsize = 18) ax2.set_ylabel(&#39;Daily tests&#39;,fontsize = 18) myFmt = DateFormatter(&quot;%b&quot;) ax.xaxis.set_major_formatter(myFmt) #legend fig.legend(bbox_to_anchor=(0.2,1), bbox_transform=ax.transAxes, fontsize = 16, frameon=False) plt.show() . . Unsurprisingly, daily cases are highly correlated with number of daily tests . Positive rate . This is a 7 day rolling average of new cases divided by number of people that are tested. . About 16% of the population tested returned a positive Covid test result. . # codes import matplotlib.ticker as mtick from matplotlib.dates import DateFormatter fig, ax = plt.subplots(1, 1, figsize=(15,5)) avg_pos_rate = covid_id[&#39;Positive rate harian&#39;].mean() ax.plot(covid_id.index,covid_id[&#39;Positive rate mingguan&#39;],&#39;-D&#39;,markersize = 3) plt.axhline(y=avg_pos_rate, color=&#39;k&#39;, linestyle=&#39;--&#39;, alpha = 0.3) plt.text(pd.to_datetime(&quot;2020-05-01&quot;),avg_pos_rate+0.02,&quot;average positive rate: &quot;+str(round(avg_pos_rate,1))+&quot;%&quot;,fontsize = 14) ax.set_ylim([0,40]) plt.yticks(np.arange(0,41,10), fontsize=16) plt.xticks( fontsize=16) plt.ylabel(&#39;Weekly positive rate (%)&#39;, fontsize=18) ax.get_yaxis().set_major_formatter(mtick.FuncFormatter(lambda x, p: format(int(x), &#39;,&#39;))) myFmt = DateFormatter(&quot;%b&quot;) ax.xaxis.set_major_formatter(myFmt) plt.show() . . Mortality rate . Average mortality rate is 5.5. However, this is likely affected by the data collected during March. This seems to indicate data was not collected (or the data collection is not fully functional yet). More accurate perhaps is the recent mortality rate, which is around 3.6. . # codes #death_rate = df_indo[&#39;2020-03-1&#39;::].new_deaths/df_indo[&#39;2020-03-1&#39;::].new_cases*100 avg_death_rate = covid_id[&#39;Tingkat kematian (seluruh kasus)&#39;].mean() fig, ax = plt.subplots(1, 1, figsize=(15,5)) ax.plot(covid_id.index, covid_id[&#39;Tingkat kematian (seluruh kasus)&#39;] ,&#39;-D&#39;,color =&#39;b&#39;,markersize = 3,alpha = 0.5) plt.axhline(y=avg_death_rate, color=&#39;b&#39;, linestyle=&#39;--&#39;, alpha = 0.3) plt.text(pd.to_datetime(&quot;2020-08-01&quot;),avg_death_rate+0.5,&quot;average mortality rate: &quot;+str(round(avg_death_rate,1))+&#39;%&#39;,fontsize = 14,color=&#39;blue&#39;) plt.axhline(y=3.6, color=&#39;g&#39;, linestyle=&#39;--&#39;, alpha = 0.3) plt.text(pd.to_datetime(&quot;2020-04-01&quot;),3.2-1.3,&quot;Recent mortality rate?: &quot;+str(3.6)+&#39;%&#39;,fontsize = 14,color=&#39;g&#39;) plt.yticks(np.arange(0,15.1,5), fontsize=16) plt.xticks( fontsize=16) plt.ylabel(&#39;Mortality rate&#39;, fontsize=18) myFmt = DateFormatter(&quot;%b&quot;) ax.xaxis.set_major_formatter(myFmt) plt.show() . . Interactive Province Map . # Load GEOjson data with open(&#39;IDN_adm_1_province.json&#39;) as data_file: indo_map = json.load(data_file) . . # temp a = [] for x in range(len(indo_map[&#39;features&#39;])): y = indo_map[&quot;features&quot;][x][&#39;properties&#39;][&#39;NAME_1&#39;] a.append(y) . . # transpose total cases per province indo_cases = total_cases.tail(1).T.reset_index() indo_cases.columns = [&#39;Province&#39;,&#39;Total_cases&#39;] indo_cases = indo_cases[:-1] # rename Province based on JSON name indo_cases[&#39;Province&#39;] = [&#39;Aceh&#39;,&#39;Bali&#39;,&#39;Banten&#39;,&#39;Bangka-Belitung&#39;,&#39;Bengkulu&#39;,&#39;Yogyakarta&#39;,&#39;Jakarta Raya&#39;,&#39;Jambi&#39;, &#39;Jawa Barat&#39;,&#39;Jawa Tengah&#39;,&#39;Jawa Timur&#39;,&#39;Kalimantan Barat&#39;,&#39;Kalimantan Timur&#39;, &#39;Kalimantan Tengah&#39;,&#39;Kalimantan Selatan&#39;,&#39;Kalimantan Utara&#39;,&#39;Kepulauan Riau&#39;, &#39;Nusa Tenggara Barat&#39;,&#39;Sumatera Selatan&#39;,&#39;Sumatera Barat&#39;,&#39;Sulawesi Utara&#39;, &#39;Sumatera Utara&#39;,&#39;Sulawesi Tenggara&#39;,&#39;Sulawesi Selatan&#39;,&#39;Sulawesi Tengah&#39;,&#39;Lampung&#39;, &#39;Riau&#39;,&#39;Maluku Utara&#39;,&#39;Maluku&#39;,&#39;Irian Jaya Barat&#39;,&#39;Papua&#39;,&#39;Sulawesi Barat&#39;, &#39;Nusa Tenggara Timur&#39;,&#39;Gorontalo&#39;] # transpose new cases per province indo_cases2 = new_cases.tail(1).T.reset_index() indo_cases2.columns = [&#39;Province&#39;,&#39;New_cases&#39;] indo_cases2 = indo_cases2[:-1] #combine DF indo_cases[&#39;New_cases&#39;] = indo_cases2[&#39;New_cases&#39;] . . # plot map fig5 = px.choropleth(indo_cases, geojson=indo_map, locations=indo_cases[&#39;Province&#39;], color=indo_cases[&#39;Total_cases&#39;], # lifeExp is a column of gapminder color_continuous_scale=px.colors.sequential.Reds,featureidkey=&quot;properties.NAME_1&quot;) fig5.update_geos(fitbounds=&quot;locations&quot;) fig5.update_layout(title = &#39;Total cases per province&#39;) HTML(fig5.to_html(include_plotlyjs=&#39;cdn&#39;)) . . . . # plot map fig6 = px.choropleth(indo_cases, geojson=indo_map, locations=indo_cases[&#39;Province&#39;], color=indo_cases[&#39;New_cases&#39;], # lifeExp is a column of gapminder color_continuous_scale=px.colors.sequential.Reds,featureidkey=&quot;properties.NAME_1&quot;) fig6.update_geos(fitbounds=&quot;locations&quot;) fig6.update_layout(title = &#39;New cases per province (&#39;+str(d1)+&#39;)&#39;) fig6.update_layout(coloraxis_colorbar=dict(title=&#39;Daily cases&#39;)) HTML(fig6.to_html(include_plotlyjs=&#39;cdn&#39;)) . . . . Both the total cases and new cases indicate that most cases are in Java. This is expected since Java is the island with the most dense population. Data from other sources also indicate that most Covid tests are being performed in Java (especially Jakarta and East Java). . Other stats in Indonesia . Top 10 total cases and daily cases (last data) . def plot_hbar_sidexside(df1, col1, n1, df2, col2, n2, hover_data=[]): from plotly.subplots import make_subplots fig7 = px.bar(df1.sort_values(col1).tail(n1), x=col1, y=&quot;Province&quot;, text=col1, orientation=&#39;h&#39;, width=700, hover_data=hover_data, color_discrete_sequence = px.colors.qualitative.Dark2) fig8 = px.bar(df2.sort_values(col2).tail(n2), x=col2, y=&quot;Province&quot;, text=col2, orientation=&#39;h&#39;, width=700, hover_data=hover_data, color_discrete_sequence = px.colors.qualitative.Dark2) trace1 = fig7[&#39;data&#39;][0] trace2 = fig8[&#39;data&#39;][0] fig9 = make_subplots(rows=1, cols=2, shared_xaxes=False) fig9.add_trace(trace1, row=1, col=1) fig9.update_layout(title=&#39;Provinces with the highest total cases Provinces with the highest daily cases (&#39;+str(d1)+&#39;)&#39;) fig9.add_trace(trace2, row=1, col=2) #fig2.update_layout(title=&#39;Violin per feature2&#39;) return fig9 fig9 = plot_hbar_sidexside(indo_cases,&#39;Total_cases&#39;,10,indo_cases,&#39;New_cases&#39;,10,) HTML(fig9.to_html(include_plotlyjs=&#39;cdn&#39;)) . . . . Cases vs population . Clean population related data . # cleaning population data pop_id2 = pop_id.copy() pop_id2 = pop_id2 .rename(columns=pop_id2 .iloc[0]).drop(pop_id2 .index[0]) pop_id2.columns = [&#39;Province&#39;,&#39;suspect&#39;,&#39;Jumlah PCR+TCM&#39;,&#39;Population&#39;] # rename province to make it the same as the GEOjson pop_id2.at[3,&#39;Province&#39;] = &#39;Bangka-Belitung&#39; pop_id2.at[6,&#39;Province&#39;] = &#39;Yogyakarta&#39; pop_id2.at[7,&#39;Province&#39;] = &#39;Jakarta Raya&#39; pop_id2.at[25,&#39;Province&#39;] = &#39;Irian Jaya Barat&#39; # convert to numeric pop_id2 = pop_id2.replace(&#39;,&#39;,&#39;&#39;, regex=True).replace(&#39;&#39;,0, regex=True) pop_id2[&#39;suspect&#39;] = pd.to_numeric(pop_id2[&#39;suspect&#39;]) pop_id2[&#39;Jumlah PCR+TCM&#39;] = pd.to_numeric(pop_id2[&#39;Jumlah PCR+TCM&#39;]) pop_id2[&#39;Population&#39;] = pd.to_numeric(pop_id2[&#39;Population&#39;]) indo_cases = indo_cases.merge(pop_id2,how=&#39;left&#39;, left_on=&#39;Province&#39;, right_on=&#39;Province&#39;) . . # plot fig10 = px.scatter(indo_cases, y=&#39;Total_cases&#39;, x=&#39;Population&#39;, color=&#39;Total_cases&#39;, size=&#39;Total_cases&#39;, height=700, text=&#39;Province&#39;, log_x=True, log_y=True, title=&#39;Total cases vs Population (Scale is in log10)&#39;, hover_data={&#39;Province&#39;:True,&#39;Total_cases&#39;:&#39;:,&#39;,&#39;Population&#39;:&#39;:,&#39;}) fig10.update_traces(textposition=&#39;top center&#39;) fig10.update_layout(showlegend=False) HTML(fig10.to_html(include_plotlyjs=&#39;cdn&#39;)) . . . . # Plot LBF fig, ax = plt.subplots(1, 1, figsize=(15,5)) from numpy.polynomial.polynomial import polyfit y,x = indo_cases.Total_cases,indo_cases.Population plt.plot(x,y,&#39;o&#39;) b,m = polyfit(x, y, 1) plt.plot(x.sort_values(), m*x.sort_values() + b) jkt_data = indo_cases[indo_cases[&#39;Province&#39;]==&#39;Jakarta Raya&#39;] plt.xlabel(&#39;Population&#39;,fontsize = 18) plt.ylabel(&#39;Total cases&#39;,fontsize = 18) plt.yticks(np.arange(0,80001,20000), fontsize=16) plt.xticks(np.arange(0,50000001,10000000), fontsize=16) ax.annotate(&#39;Jakarta&#39;, xy=(jkt_data[&#39;Population&#39;]+1000000, jkt_data[&#39;Total_cases&#39;]), xycoords=&#39;data&#39;, xytext=(0.38, 0.975), textcoords=&#39;axes fraction&#39;, arrowprops=dict(facecolor=&#39;black&#39;, shrink=0.05, width = 0.4, headwidth = 10), horizontalalignment=&#39;right&#39;, verticalalignment=&#39;top&#39;,fontsize = 16 ) plt.show() . . That&#39;s weird. Jakarta has a significantly higher total cases relative to its population (a proxy for density) . Unless, if jakarta tests the proportion of their population much higher compared to other provinces? . Unfortunately, I cannot find data regarding tests per province. However, there is an article below. Based on the data there, Jakarta ran 35k tests per 1M population. Three times as much as the second place, Bali (12k tests / 1M population). Hence it might be possible the high covid rate in Jakarta per population is due to the number of testing here . https://www.thejakartapost.com/news/2020/07/22/testing-disparity-among-regions-a-challenge-for-covid-19-response.html . Java vs non Java . Create java and non-java category. . # create java and non-java category indo_cases[&#39;Java&#39;] = &#39;Non-Java&#39; indo_cases.at[[2,5,6,8,9,10],&#39;Java&#39;] = indo_cases[&#39;Province&#39;] . . # plot from plotly.subplots import make_subplots fig11 = px.pie(indo_cases, values =&#39;Total_cases&#39;, names = &#39;Java&#39;,color=&#39;Java&#39;, color_discrete_sequence=px.colors.sequential.Teal) fig12 = (px.pie(indo_cases, values =&#39;New_cases&#39;, names = &#39;Java&#39; ,title = &#39;Total cases&#39;)) trace1 = fig11[&#39;data&#39;][0] trace2 = fig12[&#39;data&#39;][0] fig13 = make_subplots(rows=1, cols=2, specs=[[{&#39;type&#39;:&#39;domain&#39;}, {&#39;type&#39;:&#39;domain&#39;}]]) fig13.add_trace(trace1, row=1, col=1) fig13.add_trace(trace2, row=1, col=2) fig13.update_traces(textposition=&#39;inside&#39;, textinfo=&#39;percent+label&#39;) fig13.update_traces(hole =.4,hoverinfo=&quot;label+percent+name&quot;) fig13.update_traces(textposition = &quot;outside&quot;) fig13.update_layout(showlegend=False) fig13.update_layout(title_text=&quot;Total cases and new cases (&quot;+str(d1)+&#39;)&#39; ,annotations =[dict(text=&#39;Total&#39;, x=0.18, y=0.5, font_size=20, showarrow=False), dict(text=&#39;New&#39;, x=0.82, y=0.5, font_size=20, showarrow=False)]) HTML(fig13.to_html(include_plotlyjs=&#39;cdn&#39;)) . . . . It can be observed that 60% of the reported Covid19 cases in Indonesia is in Java. The trend still continues for the new cases reported daily . Effect of PSBB? . PSBB is the Jakarta version of Lockdown. There is the full PSBB (stricter lockdown) or PSBB transisi (softer Lockdown). Those periods are: . Full PSBB: 10 April - 4 Juni | PSBB transisi: 5 Juni - 10 September | Full PSBB: 11 September - 12 Oktober | PSBB transisi: 12 Oktober - etc | . Let&#39;s see if PSBB worked or not, as well as whether softer lockdown increased the growth of new cases relative to the national data. . # plotting fig, ax = plt.subplots(1, 1, figsize=(15,5)) np.log(covid_id[&#39;Kasus baru&#39;]).plot(label=&#39;National&#39;) np.log(new_cases[&#39;Jakarta&#39;]).plot(label=&#39;Jakarta&#39;) xposition = [pd.to_datetime(&#39;2020-04-10&#39;), pd.to_datetime(&#39;2020-06-05&#39;), pd.to_datetime(&#39;2020-09-11&#39;), pd.to_datetime(&#39;2020-10-12&#39;)] for xc in xposition: ax.axvline(x=xc, color=&#39;k&#39;, linestyle=&#39;--&#39;, alpha = 0.5) plt.text(pd.to_datetime(&quot;2020-04-25&quot;),1.5,&quot;Full PSBB n(10 Apr - 4 Jun)&quot;,fontsize = 14) plt.text(pd.to_datetime(&quot;2020-07-10&quot;),1.5,&quot;PSBB Transition n(5 Jun - 10 Sep)&quot;,fontsize = 14) plt.text(pd.to_datetime(&quot;2020-09-20&quot;),1.5,&quot;Full PSBB n(11 Sep n- 12 Oct)&quot;,fontsize = 14) plt.xticks(fontsize=16, rotation = 0) plt.yticks(np.arange(0,10.5, 5),fontsize=16) plt.ylabel(&#39;New cases (in log) n&#39;, fontsize=18) plt.xlabel(&#39;&#39;) ax.get_yaxis().set_major_formatter(mtick.FuncFormatter(lambda x, p: format(int(x), &#39;,&#39;))) myFmt = DateFormatter(&quot;%b&quot;) ax.xaxis.set_major_formatter(myFmt) plt.legend(frameon=False, fontsize = 16) plt.show() . . C: Users Riyan Aditya Anaconda3 lib site-packages pandas core series.py:853: RuntimeWarning: divide by zero encountered in log . I do not think that this is a big indication whether PSBB was a success or not, but it seems that &quot;Full PSBB&quot; slowed down the detected new covid cases in Jakarta, relative to the national (gap between both curves widened during this Full PSBB). However, during the transition, the infection rate seems higher and closer to the national rate. . However, it should be noted that the amount of covid testing also increases over time. .",
            "url": "https://riyan-aditya.github.io//MyBlog/2020/10/12/CovidID.html",
            "relUrl": "/2020/10/12/CovidID.html",
            "date": " • Oct 12, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://riyan-aditya.github.io//MyBlog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://riyan-aditya.github.io//MyBlog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}